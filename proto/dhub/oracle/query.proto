syntax = "proto3";
package dhub.oracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dhub/oracle/params.proto";
import "dhub/oracle/oracle.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/youngjoon-lee/dhub/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/youngjoon-lee/dhub/oracle/params";
  }

  // Queries a Join by id.
  rpc Join(QueryGetJoinRequest) returns (QueryGetJoinResponse) {
	option (google.api.http).get = "/youngjoon-lee/dhub/oracle/join/{id}";
  }

  // Queries a list of Join items.
  rpc JoinAll(QueryAllJoinRequest) returns (QueryAllJoinResponse) {
      option (google.api.http).get = "/youngjoon-lee/dhub/oracle/join";
  }

  // Queries an Oracle by operator_address.
  rpc Oracle(QueryGetOracleRequest) returns (QueryGetOracleResponse) {
	option (google.api.http).get = "/youngjoon-lee/dhub/oracle/oracle/{operator_address}";
  }

  // Queries a list of Oracle items.
  rpc OracleAll(QueryAllOracleRequest) returns (QueryAllOracleResponse) {
      option (google.api.http).get = "/youngjoon-lee/dhub/oracle/oracle";
  }

  // Queries an oracle pubkey
  rpc OraclePubKey(QueryGetOraclePubKeyRequest) returns (QueryGetOraclePubKeyResponse) {
	option (google.api.http).get = "/youngjoon-lee/dhub/oracle/oracle_pub_key";
  }

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetJoinRequest {
	uint64 id = 1;
}

message QueryGetJoinResponse {
	Join join = 1 [(gogoproto.nullable) = false];
}

message QueryAllJoinRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllJoinResponse {
	repeated Join join = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetOracleRequest {
  string operator_address = 1;
}

message QueryGetOracleResponse {
  Oracle oracle = 1 [(gogoproto.nullable) = false];
}

message QueryAllOracleRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOracleResponse {
  repeated Oracle oracle = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetOraclePubKeyRequest {
}

message QueryGetOraclePubKeyResponse {
  OraclePubKey pub_key = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
