syntax = "proto3";
package dhub.oracle;

import "gogoproto/gogo.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "dhub/oracle/oracle.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/youngjoon-lee/dhub/x/oracle/types";

// Msg defines the Msg service.
service Msg {
  rpc Init(MsgInit) returns (MsgInitResponse);
  rpc Join(MsgJoin) returns (MsgJoinResponse);
  rpc VoteForJoin(MsgVoteForJoin) returns (MsgVoteForJoinResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgInit {
  string operator_address = 1;
  bytes enclave_report = 2;
  cosmos.crypto.secp256k1.PubKey oracle_pub_key = 3;
}

message MsgInitResponse {
}

message MsgJoin {
  string operator_address = 1;
  bytes enclave_report = 2;
  cosmos.crypto.secp256k1.PubKey enc_pub_key = 3;
}

message MsgJoinResponse {
  uint64 id = 1 [(gogoproto.customname) = "ID"];
}

message MsgVoteForJoin {
  uint64 join_id = 1 [(gogoproto.customname) = "JoinID"];
  VoteOption option = 2;
  string encrypted_oracle_priv_key_b64 = 3;
  string voter = 4;
}

message MsgVoteForJoinResponse {}

// this line is used by starport scaffolding # proto/tx/message
