// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhub/oracle/oracle.proto

package types

import (
	fmt "fmt"
	secp256k1 "github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JoinStatus int32

const (
	JOIN_STATUS_PENDING  JoinStatus = 0
	JOIN_STATUS_APPROVED JoinStatus = 1
	JOIN_STATUS_REJECTED JoinStatus = 2
)

var JoinStatus_name = map[int32]string{
	0: "JOIN_STATUS_PENDING",
	1: "JOIN_STATUS_APPROVED",
	2: "JOIN_STATUS_REJECTED",
}

var JoinStatus_value = map[string]int32{
	"JOIN_STATUS_PENDING":  0,
	"JOIN_STATUS_APPROVED": 1,
	"JOIN_STATUS_REJECTED": 2,
}

func (x JoinStatus) String() string {
	return proto.EnumName(JoinStatus_name, int32(x))
}

func (JoinStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{0}
}

type VoteOption int32

const (
	OptionYes VoteOption = 0
	OptionNo  VoteOption = 1
)

var VoteOption_name = map[int32]string{
	0: "VOTE_OPTION_YES",
	1: "VOTE_OPTION_NO",
}

var VoteOption_value = map[string]int32{
	"VOTE_OPTION_YES": 0,
	"VOTE_OPTION_NO":  1,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{1}
}

type Join struct {
	ID              uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatorAddress string            `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	EnclaveReport   []byte            `protobuf:"bytes,3,opt,name=enclave_report,json=enclaveReport,proto3" json:"enclave_report,omitempty"`
	EncPubKey       *secp256k1.PubKey `protobuf:"bytes,4,opt,name=enc_pub_key,json=encPubKey,proto3" json:"enc_pub_key,omitempty"`
	Status          JoinStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=dhub.oracle.JoinStatus" json:"status,omitempty"`
	TallyResult     TallyResult       `protobuf:"bytes,6,opt,name=tally_result,json=tallyResult,proto3" json:"tally_result"`
}

func (m *Join) Reset()         { *m = Join{} }
func (m *Join) String() string { return proto.CompactTextString(m) }
func (*Join) ProtoMessage()    {}
func (*Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{0}
}
func (m *Join) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Join.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Join.Merge(m, src)
}
func (m *Join) XXX_Size() int {
	return m.Size()
}
func (m *Join) XXX_DiscardUnknown() {
	xxx_messageInfo_Join.DiscardUnknown(m)
}

var xxx_messageInfo_Join proto.InternalMessageInfo

func (m *Join) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Join) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Join) GetEnclaveReport() []byte {
	if m != nil {
		return m.EnclaveReport
	}
	return nil
}

func (m *Join) GetEncPubKey() *secp256k1.PubKey {
	if m != nil {
		return m.EncPubKey
	}
	return nil
}

func (m *Join) GetStatus() JoinStatus {
	if m != nil {
		return m.Status
	}
	return JOIN_STATUS_PENDING
}

func (m *Join) GetTallyResult() TallyResult {
	if m != nil {
		return m.TallyResult
	}
	return TallyResult{}
}

type VoteForJoin struct {
	JoinID                    uint64     `protobuf:"varint,1,opt,name=join_id,json=joinId,proto3" json:"join_id,omitempty"`
	Option                    VoteOption `protobuf:"varint,2,opt,name=option,proto3,enum=dhub.oracle.VoteOption" json:"option,omitempty"`
	EncryptedOraclePrivKeyB64 string     `protobuf:"bytes,3,opt,name=encrypted_oracle_priv_key_b64,json=encryptedOraclePrivKeyB64,proto3" json:"encrypted_oracle_priv_key_b64,omitempty"`
	Voter                     string     `protobuf:"bytes,4,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *VoteForJoin) Reset()         { *m = VoteForJoin{} }
func (m *VoteForJoin) String() string { return proto.CompactTextString(m) }
func (*VoteForJoin) ProtoMessage()    {}
func (*VoteForJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{1}
}
func (m *VoteForJoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteForJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteForJoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteForJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteForJoin.Merge(m, src)
}
func (m *VoteForJoin) XXX_Size() int {
	return m.Size()
}
func (m *VoteForJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteForJoin.DiscardUnknown(m)
}

var xxx_messageInfo_VoteForJoin proto.InternalMessageInfo

func (m *VoteForJoin) GetJoinID() uint64 {
	if m != nil {
		return m.JoinID
	}
	return 0
}

func (m *VoteForJoin) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return OptionYes
}

func (m *VoteForJoin) GetEncryptedOraclePrivKeyB64() string {
	if m != nil {
		return m.EncryptedOraclePrivKeyB64
	}
	return ""
}

func (m *VoteForJoin) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

type TallyResult struct {
	Yes      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=yes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"yes"`
	YesValue string                                 `protobuf:"bytes,2,opt,name=yesValue,proto3" json:"yesValue,omitempty"`
	No       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=no,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no"`
}

func (m *TallyResult) Reset()         { *m = TallyResult{} }
func (m *TallyResult) String() string { return proto.CompactTextString(m) }
func (*TallyResult) ProtoMessage()    {}
func (*TallyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{2}
}
func (m *TallyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyResult.Merge(m, src)
}
func (m *TallyResult) XXX_Size() int {
	return m.Size()
}
func (m *TallyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyResult.DiscardUnknown(m)
}

var xxx_messageInfo_TallyResult proto.InternalMessageInfo

func (m *TallyResult) GetYesValue() string {
	if m != nil {
		return m.YesValue
	}
	return ""
}

type Oracle struct {
	OperatorAddress string                                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	EnclaveReport   []byte                                 `protobuf:"bytes,2,opt,name=enclave_report,json=enclaveReport,proto3" json:"enclave_report,omitempty"`
	Stake           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=stake,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"stake"`
}

func (m *Oracle) Reset()         { *m = Oracle{} }
func (m *Oracle) String() string { return proto.CompactTextString(m) }
func (*Oracle) ProtoMessage()    {}
func (*Oracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{3}
}
func (m *Oracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Oracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Oracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Oracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oracle.Merge(m, src)
}
func (m *Oracle) XXX_Size() int {
	return m.Size()
}
func (m *Oracle) XXX_DiscardUnknown() {
	xxx_messageInfo_Oracle.DiscardUnknown(m)
}

var xxx_messageInfo_Oracle proto.InternalMessageInfo

func (m *Oracle) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Oracle) GetEnclaveReport() []byte {
	if m != nil {
		return m.EnclaveReport
	}
	return nil
}

type OraclePubKey struct {
	PubKey *secp256k1.PubKey `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *OraclePubKey) Reset()         { *m = OraclePubKey{} }
func (m *OraclePubKey) String() string { return proto.CompactTextString(m) }
func (*OraclePubKey) ProtoMessage()    {}
func (*OraclePubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_efde212b2db332c8, []int{4}
}
func (m *OraclePubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OraclePubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OraclePubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OraclePubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OraclePubKey.Merge(m, src)
}
func (m *OraclePubKey) XXX_Size() int {
	return m.Size()
}
func (m *OraclePubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_OraclePubKey.DiscardUnknown(m)
}

var xxx_messageInfo_OraclePubKey proto.InternalMessageInfo

func (m *OraclePubKey) GetPubKey() *secp256k1.PubKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func init() {
	proto.RegisterEnum("dhub.oracle.JoinStatus", JoinStatus_name, JoinStatus_value)
	proto.RegisterEnum("dhub.oracle.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterType((*Join)(nil), "dhub.oracle.Join")
	proto.RegisterType((*VoteForJoin)(nil), "dhub.oracle.VoteForJoin")
	proto.RegisterType((*TallyResult)(nil), "dhub.oracle.TallyResult")
	proto.RegisterType((*Oracle)(nil), "dhub.oracle.Oracle")
	proto.RegisterType((*OraclePubKey)(nil), "dhub.oracle.OraclePubKey")
}

func init() { proto.RegisterFile("dhub/oracle/oracle.proto", fileDescriptor_efde212b2db332c8) }

var fileDescriptor_efde212b2db332c8 = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xda, 0x48,
	0x18, 0x65, 0x1c, 0xe2, 0x84, 0x81, 0x24, 0x68, 0x36, 0xda, 0x78, 0x91, 0x16, 0x2c, 0x56, 0xbb,
	0x62, 0xa3, 0x8d, 0xad, 0x4d, 0xd3, 0xa8, 0xa7, 0x36, 0x50, 0x48, 0x4b, 0x22, 0x61, 0x64, 0x28,
	0x6a, 0x7a, 0xb1, 0x8c, 0x3d, 0xa2, 0x0e, 0xc4, 0x63, 0x79, 0x06, 0x54, 0xff, 0x83, 0x2a, 0xa7,
	0xfe, 0x81, 0x48, 0x95, 0xaa, 0x9e, 0xfa, 0x13, 0xfa, 0x07, 0x72, 0xcc, 0xb1, 0xea, 0x01, 0x55,
	0xe4, 0x8f, 0x54, 0x9e, 0x01, 0x42, 0xa3, 0x1c, 0xd2, 0x9e, 0xc6, 0xf3, 0xde, 0x9b, 0xf1, 0xfb,
	0x9e, 0x9e, 0x06, 0x2a, 0xee, 0xeb, 0x61, 0x57, 0x27, 0xa1, 0xed, 0x0c, 0xf0, 0x74, 0xd1, 0x82,
	0x90, 0x30, 0x82, 0xd2, 0x31, 0xa3, 0x09, 0x28, 0xb7, 0xd9, 0x23, 0x3d, 0xc2, 0x71, 0x3d, 0xfe,
	0x12, 0x92, 0x5c, 0xd1, 0x21, 0xf4, 0x8c, 0x50, 0xdd, 0x09, 0xa3, 0x80, 0x11, 0x9d, 0x62, 0x27,
	0xd8, 0x7d, 0xb8, 0xdf, 0xff, 0x5f, 0xef, 0xe3, 0x88, 0x0a, 0x4d, 0xf1, 0xa3, 0x04, 0x93, 0x47,
	0xc4, 0xf3, 0xd1, 0xef, 0x50, 0xf2, 0x5c, 0x05, 0xa8, 0xa0, 0x94, 0xac, 0xc8, 0x93, 0x71, 0x41,
	0xaa, 0x57, 0x4d, 0xc9, 0x73, 0xd1, 0xbf, 0x30, 0x4b, 0x02, 0x1c, 0xda, 0x8c, 0x84, 0x96, 0xed,
	0xba, 0x21, 0xa6, 0x54, 0x91, 0x54, 0x50, 0x4a, 0x99, 0x1b, 0x33, 0xbc, 0x2c, 0x60, 0xf4, 0x37,
	0x5c, 0xc7, 0xbe, 0x33, 0xb0, 0x47, 0xd8, 0x0a, 0x71, 0x40, 0x42, 0xa6, 0x2c, 0xa9, 0xa0, 0x94,
	0x31, 0xd7, 0xa6, 0xa8, 0xc9, 0x41, 0xf4, 0x04, 0xa6, 0xb1, 0xef, 0x58, 0xc1, 0xb0, 0x6b, 0xf5,
	0x71, 0xa4, 0x24, 0x55, 0x50, 0x4a, 0xef, 0x16, 0x34, 0x61, 0x56, 0x13, 0x66, 0xb5, 0xb9, 0x59,
	0xad, 0x39, 0xec, 0x1e, 0xe3, 0xc8, 0x4c, 0x61, 0xdf, 0x11, 0x9f, 0x48, 0x87, 0x32, 0x65, 0x36,
	0x1b, 0x52, 0x65, 0x59, 0x05, 0xa5, 0xf5, 0xdd, 0x2d, 0x6d, 0x21, 0x0b, 0x2d, 0x9e, 0xa6, 0xc5,
	0x69, 0x73, 0x2a, 0x43, 0x65, 0x98, 0x61, 0xf6, 0x60, 0x10, 0x59, 0x21, 0xa6, 0xc3, 0x01, 0x53,
	0x64, 0xfe, 0x4b, 0xe5, 0x87, 0x63, 0xed, 0x58, 0x60, 0x72, 0xbe, 0x92, 0xbc, 0x1c, 0x17, 0x12,
	0x66, 0x9a, 0xdd, 0x40, 0xc5, 0xcf, 0x00, 0xa6, 0x3b, 0x84, 0xe1, 0x43, 0x12, 0xf2, 0xb8, 0xfe,
	0x82, 0x2b, 0xa7, 0xc4, 0xf3, 0xad, 0x79, 0x66, 0x70, 0x32, 0x2e, 0xc8, 0x31, 0x55, 0xaf, 0x9a,
	0x72, 0x4c, 0xd5, 0xdd, 0xd8, 0x28, 0x09, 0x98, 0x47, 0x7c, 0x9e, 0xd8, 0x6d, 0xa3, 0xf1, 0x75,
	0x06, 0xa7, 0xcd, 0xa9, 0x0c, 0x1d, 0xc0, 0x3f, 0xb1, 0xcf, 0x13, 0xc0, 0xae, 0x25, 0x64, 0x56,
	0x10, 0x7a, 0xa3, 0x38, 0x28, 0xab, 0xbb, 0xbf, 0xc7, 0x03, 0x4d, 0x99, 0x7f, 0xcc, 0x45, 0x06,
	0xd7, 0x34, 0x43, 0x6f, 0x74, 0x8c, 0xa3, 0xca, 0xfe, 0x1e, 0xda, 0x84, 0xcb, 0x23, 0xc2, 0x70,
	0xc8, 0x63, 0x4d, 0x99, 0x62, 0x53, 0xfc, 0x04, 0x60, 0x7a, 0x61, 0x40, 0x74, 0x00, 0x97, 0x22,
	0x4c, 0xb9, 0xf3, 0x54, 0x45, 0x8b, 0xa7, 0xfd, 0x3a, 0x2e, 0xfc, 0xd3, 0xf3, 0x58, 0x6c, 0xcf,
	0x21, 0x67, 0xfa, 0xac, 0x39, 0x7c, 0xd9, 0xa1, 0x6e, 0x5f, 0x67, 0x51, 0x80, 0xa9, 0x56, 0xf7,
	0x99, 0x19, 0x1f, 0x45, 0x39, 0xb8, 0x1a, 0x61, 0xda, 0xb1, 0x07, 0x43, 0x3c, 0xad, 0xc3, 0x7c,
	0x8f, 0x1e, 0x43, 0xc9, 0x27, 0xc2, 0xea, 0x4f, 0x5f, 0x2e, 0xf9, 0xa4, 0xf8, 0x1e, 0x40, 0x59,
	0x0c, 0x76, 0x67, 0xfb, 0xc0, 0x7d, 0xdb, 0x27, 0xdd, 0xd5, 0xbe, 0x2a, 0x5c, 0xa6, 0xcc, 0xee,
	0xe3, 0x5f, 0xf4, 0x27, 0x0e, 0x17, 0x9f, 0xc3, 0xcc, 0x34, 0x7a, 0x51, 0xc9, 0x47, 0x70, 0x65,
	0xd6, 0x67, 0x70, 0xbf, 0x3e, 0xcb, 0x01, 0x5f, 0xb7, 0x2d, 0x08, 0x6f, 0x1a, 0x8b, 0xb6, 0xe0,
	0x6f, 0x47, 0x46, 0xbd, 0x61, 0xb5, 0xda, 0xe5, 0xf6, 0x8b, 0x96, 0xd5, 0xac, 0x35, 0xaa, 0xf5,
	0xc6, 0xb3, 0x6c, 0x02, 0x29, 0x70, 0x73, 0x91, 0x28, 0x37, 0x9b, 0xa6, 0xd1, 0xa9, 0x55, 0xb3,
	0xe0, 0x36, 0x63, 0xd6, 0x8e, 0x6a, 0x4f, 0xdb, 0xb5, 0x6a, 0x56, 0xca, 0x25, 0xdf, 0x7e, 0xc8,
	0x27, 0xb6, 0x5f, 0x42, 0x78, 0xd3, 0x34, 0x54, 0x84, 0x1b, 0x1d, 0xa3, 0x5d, 0xb3, 0x8c, 0x66,
	0xbb, 0x6e, 0x34, 0xac, 0x93, 0x5a, 0x2b, 0x9b, 0xc8, 0xad, 0x9d, 0x5f, 0xa8, 0x29, 0x21, 0x38,
	0xc1, 0x14, 0xa9, 0x70, 0x7d, 0x51, 0xd3, 0x30, 0xb2, 0x20, 0x97, 0x39, 0xbf, 0x50, 0x57, 0x85,
	0xa4, 0x41, 0xc4, 0xcd, 0x95, 0xc3, 0xcb, 0x49, 0x1e, 0x5c, 0x4d, 0xf2, 0xe0, 0xdb, 0x24, 0x0f,
	0xde, 0x5d, 0xe7, 0x13, 0x57, 0xd7, 0xf9, 0xc4, 0x97, 0xeb, 0x7c, 0xe2, 0xd5, 0x7f, 0x0b, 0x69,
	0x46, 0x64, 0xe8, 0xf7, 0x4e, 0x09, 0xf1, 0x77, 0x06, 0x18, 0xeb, 0xfc, 0x3d, 0x7b, 0x33, 0x7b,
	0xd1, 0x78, 0xae, 0x5d, 0x99, 0x3f, 0x45, 0x0f, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x7f,
	0x32, 0xb8, 0xed, 0x04, 0x00, 0x00,
}

func (m *Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Join) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Join) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TallyResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Status != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.EncPubKey != nil {
		{
			size, err := m.EncPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.EnclaveReport) > 0 {
		i -= len(m.EnclaveReport)
		copy(dAtA[i:], m.EnclaveReport)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EnclaveReport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VoteForJoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteForJoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteForJoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncryptedOraclePrivKeyB64) > 0 {
		i -= len(m.EncryptedOraclePrivKeyB64)
		copy(dAtA[i:], m.EncryptedOraclePrivKeyB64)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EncryptedOraclePrivKeyB64)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Option != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x10
	}
	if m.JoinID != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.JoinID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TallyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.No.Size()
		i -= size
		if _, err := m.No.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.YesValue) > 0 {
		i -= len(m.YesValue)
		copy(dAtA[i:], m.YesValue)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.YesValue)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Yes.Size()
		i -= size
		if _, err := m.Yes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Oracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Oracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Stake.Size()
		i -= size
		if _, err := m.Stake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EnclaveReport) > 0 {
		i -= len(m.EnclaveReport)
		copy(dAtA[i:], m.EnclaveReport)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EnclaveReport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OraclePubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OraclePubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OraclePubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Join) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovOracle(uint64(m.ID))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.EnclaveReport)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.EncPubKey != nil {
		l = m.EncPubKey.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOracle(uint64(m.Status))
	}
	l = m.TallyResult.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *VoteForJoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinID != 0 {
		n += 1 + sovOracle(uint64(m.JoinID))
	}
	if m.Option != 0 {
		n += 1 + sovOracle(uint64(m.Option))
	}
	l = len(m.EncryptedOraclePrivKeyB64)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *TallyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Yes.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = len(m.YesValue)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.No.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *Oracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.EnclaveReport)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *OraclePubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclaveReport = append(m.EnclaveReport[:0], dAtA[iNdEx:postIndex]...)
			if m.EnclaveReport == nil {
				m.EnclaveReport = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncPubKey == nil {
				m.EncPubKey = &secp256k1.PubKey{}
			}
			if err := m.EncPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= JoinStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteForJoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteForJoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteForJoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinID", wireType)
			}
			m.JoinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedOraclePrivKeyB64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedOraclePrivKeyB64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Yes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YesValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YesValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Oracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclaveReport = append(m.EnclaveReport[:0], dAtA[iNdEx:postIndex]...)
			if m.EnclaveReport == nil {
				m.EnclaveReport = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OraclePubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OraclePubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OraclePubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &secp256k1.PubKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
